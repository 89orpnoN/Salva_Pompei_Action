BaseProperties|

func SKey(KEY, functioncheck, UpNDown=false): #key value paired with the function used to check if it is being pressed
	var key = {
		"WasDown":false,
		"Value":KEY,
		"FunctionCheck":functioncheck,
		"UpNDown":UpNDown,
	}
	return key

func AddAmmoToInventory(creature,AmmoType,amount):
	var delta = creature.Inventory.AmmoType[1]-creature.Inventory.AmmoType[0]
	if delta < amount:
		creature.Inventory.AmmoType[0] += delta
	else:
		creature.Inventory.AmmoType[0] += amount

Enemy

func attackphase(delta):
	if BaseClasses.isObjectVisible(self,Victim) and BaseClasses.inRange(creatureObject,Victim.global_position):
		PointToPoint(Victim.global_position,delta)
		if creatureObject.Gun.AmmoType != null and creatureObject.Inventory[creatureObject.Gun.AmmoType][0] < 1:
			ActionsArr.append(70)
		else:
			ActionsArr.append(50)
	else:
		Victim = GetNewVictim()
		creatureObject.State = BaseClasses.CHASING


func _ready():
	set_lock_rotation_enabled(false)
	
	Navigator = get_node("PathMaker")
	ActionKeys = {
		"forward":[Key(10),Key(11)],
		"backward":[Key(20),Key(21)],
		"left":[Key(30),Key(31)],
		"right":[Key(40),Key(41)],
		"shoot":[Key(50),Key(51)],
		"reload":[Key(60)],
		"NextGun":[Key(70,isInActions,true)],
		"CheckAndExecuteKey": func (KeyArr, func_to_apply,arguments = null):
			for i in KeyArr:
					if i.FunctionCheck.call(i.Value):
						if i.UpNDown:
							if i.WasDown == false:
								if arguments != null:
									func_to_apply.callv(arguments)
								else:
									func_to_apply.call()
								i.WasDown = true
						else:
							func_to_apply.call()
						break
						
					else:
						if i.UpNDown:
							i.WasDown = false
	}